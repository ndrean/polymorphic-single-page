<div class="container">
  <div class="row">
  <h1>Ajax rendering, Forms, Nested Polymorphism</h1>
  <%= flash[:hello] %>
  </div>
</div>



<div class="container">
<div class="row">
<h6> <a href="#create"> As a user/admin, I can create/Edit an author, then a book and it's genre</a></h6>
</div>
<div class="row">
<h6> <a href="#"> As a user/author, I can create/Edit a book and add/create it's genre, and add/create it's author
</a></h6>
</div>
<div class="row">
<h6> <a href="#"> As a user, I can create reviews associated to an author or a book, or a movie</a></h6>
</div>

<div class="row">
  <h6><a href="#cookie"> Displaying form input (no model or Active Record object) within the same page</a>  </h6>
  </div>
  <div class="row">
  <h6><a href="#2-rendering"> Rendering form with page</a>  </h6>
  </div>

  <div class="row">
    <h6><a href="#search"> Multi-select search Ajax rendered by pagination( Todo) </a></h6>
  </div>

  <div class="row">
    <h3><a href="#API-JSON"> API call and JSON rendering </a></h3>
  </div>

</div>
<div class="container" id="create">
  <h3> Triple associated 'has_may / belongs_to' nested form to CREATE an author, his books and set/create it's genre</h3>

  <%= link_to 'Create Author / Book', new_author_path %>

      
<h3> Triple associated 'has_may / belongs_to' nested form to EDIT an author or a book and it's genre</h3>
</div>
<hr>
<div class="container" id="cookie"> 
<h3>Form with no model rerendered in the page</h3>
  <p> To submit a form with no model, we use a symbol <strong>simple_form_for :search</strong>. Forms are 'POST' by default,
  and we specifiy the action via <strong>controller#method</strong>
  </p>

  <h5>Submitting a form via cookie (with page refresh)</h5>
  The input of this form will be transmitted to this page via a cookie. A cookie is declared by naming it,
  for example <strong>cookies[:form]</strong>. The controller method saves the params in a cookie. Then the method calls 'redirect_to' this same page. There is a partial '_form.html.erb' bellow waiting for an input: %= render 'books/form'  % . Once submitted, the input appears bellow. 
  We can keep this persistant until the browser is closed, or destroy the cookie after serving the partial, so that
  a page refresh will reset the partial (this is the case here).
  <div class="row">
    <div class="col">
    <%= simple_form_for( :search, url: get_form_path) do |f| %>   
      <%= f.input_field :input %>
      <%= f.submit "Display with Cookie", class:"btn btn-primary"%>
    <% end %>
    </div>
    <div class="col">
      Result: <h6> <%= render 'books/form'  %></h6>
      <% cookies.delete :form %>
    </div>
  </div>
  
  <br>
  <h5>Submitting a form via AJAX</h5>
  <p> This form has no model so we use a symbol <strong>:search</strong> to the form helper
  <strong>simple_form_for </strong>. The form is AJAX submitted with <strong>remote: true</strong>.
  The method is specified by <strong>url: "controller/method_name"</strong>. It captures the input
  with <strong>params[:search]</strong>. By default, it is <strong>POST</strong>.
  In the controler, we ask the method to <strong>respond_to format.js</strong>: it will call
  the file <strong>method_name.js.erb</strong> written in a 'js.erb'. The method will pass the data 
  to the .js.erb file. It will call a Javascript function that will render an HTML string into the HTML attribute of a DOM element.
  </p>
  
  <div class="row">
    <div class="col">
      <%= simple_form_for(:search, method: :post, url: 'books/get_form_ajax', remote: true) do |f| %>   
        <%= f.input_field :input, id:"input1", placeholder:"Type n Click"%>
         <!-- usage of .input_field to display aligned -->
        <%= f.button :submit, "Simple_form / AJAX", class:"btn btn-primary"%>
      <% end %>
    </div>
    <div class="col">
      <p>Result: <span id="ajax-form" > </span></p>
    </div>
  </div>
      
    <!-- Note: for a custom button, we do: -->
    <!--  <%#= f.button :submit, 'Search!' do %> -->
    <!--            my custom button text           -->
    <!--  <%# end %>                             -->
    <hr>
    <h5>Submitting a form with clipboard. </h5>
  <p>Example full Javascript by using the clipboard. Solution with both <strong>document.exeCommand</strong>'' or the <strong>Clipboard API</strong> (this last one is active here).</p>
  <div class="row">
    <div class="col">
    <!-- do not use 'form'. Used the Javascript function 'copyClipboard.js' -->
      <input id="to-copy" type="text" style= "border: 1px solid grey"
        placeholder = "type n click to copy/paste">
      <button id="copy-btn" class="btn btn-primary">Copy to clipboard</button>
     
    </div>
    
    <div class="col">
      <p>Result is pasted here: <span id = 'clipboard'></span></p>
    </div>
    <br>
  </div>
  <hr>
</div>

<div class="row" id='2-rendering'>
  <div class="container">
    <h4>Rendering partial within a page with AJAX </h4>
    </p> The link <strong>'View all books with AJAX' <=> < '%=' link_to "View All books with AJAX", "books/books_ajax", remote: true '%'></strong>
    calls the method (controller#method) <strong>books#books_ajax</strong>. We specified <strong>remote: true</strong>,
    so that we will have an AJAX call, and we have to add in the controller's method the following lines:
    <ul>
      respond_to do |format| <br>format.js <br>end
    </ul>
    so that this method calls the corresponding Javascript file <strong>books_ajax.js.erb</strong>.
    The controller's method furnishes the data (here <strong>@books</strong> and pass them to the JS function which renders
    (within a partial at a designed location):
    <ul>
      const divBooks = document.getElementById('books-all-ajax'); <br>
      divBooks.innerHTML = ""; <br>
      divBooks.insertAdjacentHTML( <br>
        "beforeend", <br>
      "<'%'= j render "books/books_all", books: @books, cached: true %>") <br>
      }; 
    </ul> 
    When clicking 'View all books with AJAX', since the stars are build randomly within the partial, 
    they will change but there is no page reload.
    <ul>
      <'%' (0..5).to_a.sample.times do  %> <br>
      <'i class="far fa-star" '><'/i>' <br>
      <'%' end %>
    </ul>
    </p>

    <p> A toggle button display/hide is added and triggers a listening Javascript function <strong>toggleDiv.js</strong>. On clic, it sets  
    <strong>toggleAttribute('hidden')</strong> on the div container of the response (alternatively, we can add/remove
     <strong>classList.toggle('active')</strong> to this container div where 'active' is the CSS class <strong>.active {display: none;}</strong>.
    </p>
    <p>
      <%= link_to 'View all books with AJAX', "books/books_ajax", remote: true, class:'btn btn-primary' %>
      <button class="btn btn-primary" id="hideBtn"> Hide / Show results </button>
    </p>
    <!-- class .active defined in _alert.scss and class toggled by 'toggleDiv.js-->
    <div id="hideMe" > <!-- class="not-active" -->
      <div id = "books-all-ajax"></div>  
    </div>
  </div>   
</div>
     

<hr>
<p>Books and authors can get comments by users with a polymorphic association (type <=> Book or Author, and id).
 We also have a 'User has_many :books' and 'User has_many :authors' association as a user can put many reviews which is polymorphic.  </p>
<div class="container">
  <div class="row">

    <h3>Uncommented books: using a scope and finding nil column on associated table</h3>
    <%= render 'books/reviewed_unreviewed', books: @unreviewed_books %>

  </div>
  <hr>
  <div class="row">

    <h3>Commented books: using a scope and simply joins</h3>
    <%= link_to 'Comment books', root_path %>
    <%#= render 'books/reviewed_unreviewed', books: @reviewed_books %>
    
  </div>
  <hr>
</div>



<%#= render 'books/catalog', authors: @authors %>

<!-- https://medium.com/le-wagon/build-a-simple-search-with-the-simple-form-gem-in-rails-5-b247168282d1> -->
<!-- standard method is POST so GET is specified here. -->
<!-- By using a symbol instead of an object, we can get a key in the params. Here  ':book_title' -->
<!-- so params[:search][:book_title] contains the title -->
<!-- If we had declared on object say @search, then it would have to be defined, not the case here -->

<!-- the url:'root_path', means the  result will render on the root page, so on the same page (SPA) -->
<!-- if url:'get...title_path' tells where to be displayed. It should render another page (related to the -->
<!-- view convention, but by defining the method as AJAX rendering, the Javascript will render the partial-->
<!-- where we want. This AJAX call is permitted simply by 'remote: true'  -->

<!-- 'input_field' gets rid of the div and displays the form-group elts inline. -->

<!-- we set collection here as we want the inputs to be controlled -->

<!-- with 'multiple: true', we have a drop-down selection form -->

<hr>
<div class='container' id='search'>
<h3>Multiple search forms AJAX rendered</h3>

<h5>Reviews on books (search by title)</h5>
  <div class="row">    
    <div class="col">
      <%= simple_form_for :search,
        url: 'books/reviews_by_title',
        remote: true,
        method: "GET" do |f| %>   
        <%= f.button :submit, "Search", class:"btn btn-primary"%>
        <%= f.input_field :input_title, collection: @titles, multiple: true %>   
      <% end %>
    </div>
    <div class="col">
      <div id="ajax_review_by_title"> <!-- JS injection here --> </div>
    </div>  
  </div>

  <hr>
  <h5>Books by author</h5>
  <div class="row">
    <div class="col">
      <%= simple_form_for :search,
        url: 'books/books_by_author',
        wrapper: :inline_form,
        remote: true,
        method: "GET" do |f| %>   
        <%= f.input_field :input_name, collection: @list_authors, multiple: true  %>
        <%= f.button :submit, "Search", class:"btn-primary" %>
      <% end %>
    </div>
    <div class="col">
      <div class='row' id="ajax_books_by_author"> </div>
    </div>
  </div>
  <hr>
  <h5>Comments from the users (usage of "reviewable")</h5>
  <div class="row">  
    <%= simple_form_for :search,
      url: 'books/reviews_by_user',
      remote: true,
      method: "GET" do |f| %>   
      <%= f.input_field :user_name, collection: @users_names, multiple: true %>
      <%= f.submit "Search", class:"btn btn-primary" %>
    <% end %>
  
  <hr>
    <div id="ajax_reviews_by_user">
      <% if false && @name == nil %>
        <h3>All comments by users: usage of "reviewable"</h3>
        <%= render 'books/users_reviews', users: @users %>
      <% end %>
    </div>
  </div>
</div>
<hr>
<div class="container" id="API-JSON">
  <div class="col">
      <p> The link bellow makes a HTTP request 'url= ../books_all' to display the file  '/views/books_all', which in served by the method 'books#books_all' for the data. </p>
      <p>% link_to 'View books in another page', books_all_path % </p>
      <p>This is a link to a new page. We pass directly the instance '@books' to the view which uses '@books'. This is different from partials, which use a local variable,
      'books: @books'.</p>
      <p> The same info is displayed, but through the copy of the partial without the _underscore, ie 'books/reviews_all.html.erb'. 
      This time, the data is furnished by the method books#reviews_all' which 'lazy' renders '../books/books_all.html' with Rails naming association convention. </p>

      <p><%= link_to "View 'books.json' in another page", books_display_json_path, class:'btn btn-primary' %> </p>
      <p> "render json: @books"</p>
  </div>
</div>