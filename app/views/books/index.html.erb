<div class="container">
  <div class="row">
  <h1>Ajax rendering, Forms, Nested Polymorphism</h1>
  <%= flash[:hello] %>
  </div>
</div>

<div id="start"></div>

<div class="container">
  <div class="row">
    <h6><%= link_to "As a user/admin, I can create an author, then dynamically associated books", new_dynamic_path %></h6>
  </div>

  <div class="row">
    <h6><%= link_to "As a user/admin, I can create an author, then a book and it's genre", new_author_path %></h6>
  </div>
  <div class="row">
    <h6> <a href="#"> Go to: As a user/author, I can create/Edit a book and add/create it's genre, and add/create it's author
    </a></h6>
  </div>
  <div class="row">
    <h6> <a href="#"> Go to: As a user, I can create reviews associated to an author or a book, or a movie</a></h6>
  </div>
  <div class="row">
    <h6><a href="#form-no-model"> Form with no model (no Active Record object) within the same page</a>  </h6>
  </div>
  <div class="row">
    <h6><a href="#books-all">Rendering partial within a page with AJAX</a></h6>
  </div>
  <div class="row">
    <h6><a href="#genre-fetch">AJAX and fetch in Rails</a></h6>
  </div>
  <div class="row">
      <h6><a href="#search"> Multi-select search Ajax rendered</a></h6>
  </div>
  <div class="row">
    <h6><a href="#API-JSON">JSON rendering </a></h6>
  </div>
</div>


<div class="container" id="form-no-model"> 
  <hr>
  <h3>Form with no model rerendered in the page</h3>
  <p> To submit a form with no model, we use a <strong>symbol</strong> or an <strong>url</strong>. With the form helper <strong>Simple_Form</strong>,
  we use a symbol <strong>:search</strong> (for example) and precise the url to the action <strong>controller#method</strong>. 
  With the form helper <strong>form_with</strong>, we just specify the <strong>url</strong> of the action. This form is
  <strong>remote: true</strong> by default, so awaits a <strong>method.js.erb</strong> file to render the result. We can specify
  <strong>local: true</strong> if we want non-AJAX rendering.
  Forms are 'POST' by default. The method called by this form (url calling controller#method) will capture the input by the params.
  Our form submission is CSRF protected since we have a hidden input that contains a value
  that is transmitted with the form
  </p>

  <hr>
  <p>We use Simple_Form here. To simulate saving in a database, we store the params in a cookie. A cookie is declared by naming it: <strong>cookies[:form] = params[...]</strong>.
  The method then calls a 'redirect_to' this same page. Since there is an HTML bellow  <strong>Result: <'%= render 'books/form' %></strong> 
  waiting to display a partial <strong>books/_form.html.erb</strong> that contains <strong><'%= cookies[:form] %></strong>. 
  Once submitted, the page is refreshed and the input appears bellow. 
  We can keep this persistant until the browser is closed, or destroy the cookie after serving the partial, so that
  a page refresh will reset the partial (this is the case here).
  </p>
  <div class="row">
    <div class="col">
      <ul>
        <ol><'input type="hidden" name="authenticity_token" </ol>
        <ol> value="xxxxxx=="></ol>
        <ol><'%= simple_form_for(:search, url: get_form_path,...) do |f| %></ol>
        <ol> <'%= f.text_field :search %></ol>
      </ul>
    </div>
    <div class="col">
    <%= simple_form_for( :search, url: get_form_path, wrapper: :inline_form, html: { class: "form-inline"}) do |f| %>   
      <%= f.input_field :input %>
      <%= f.submit "Display with Cookie", class:"btn btn-primary"%>
    <% end %>
    </div>
    <div class="col">
      Result:  <%= render 'books/form', result: cookies[:form] %>
      <% cookies.delete :form %>
    </div>
  </div>
  
  <hr>
  <h5>Submitting a form via AJAX</h5>
  <p>By default, the default method is <strong>POST</strong>. We use the Rails helpers  <strong>form_with</strong> and <strong>Simple_Form</strong>.
  The first 'form_with' uses an url to call the action <strong>url: controller/method</strong>, and 'Simple Form'
  uses a symbol <strong>:search</strong> and the method is specified by <strong>url: "controller/method_name"</strong>.
  The helper 'form_with' is <strong>remote: true</strong> by default, and we have to specify it for 'Simple Form'. 
  Since we use AJAX, rendering will done by the browser. The method will save the params in an instance variable
  and te data will be passed to the JS file  <strong>method.js.erb</strong>. A Javascript function will render
  an HTML string into the HTML attribute of a DOM element. We also have a CSRFToken iva a hidden input. </p>
  <div class="row">
    <div class="col">
    <ul>
     <ol><strong>file.html.erb</strong></ol>
      <ol><'%= form_with url:'books/get_form_3' do |f| %></ol>
      <ol><'%= f.text_field :search %></ol>
      <ol><strong>controller</strong></ol>
      <ol>@result = params[:input]</ol>
      <ol><strong>method.js.erb</strong></ol>
      <ol>....textContent = "<'%= @result %>"</ol>
    </ul>
    </div>
    
    <div class="col">
      <%= form_with url:'books/get_form_1' do |f| %>
        <%= f.text_field :input %>
        <%= f.submit "Form_with (AJAX)", class:'btn btn-primary' %>
      <% end %>
      <br>
      <%= simple_form_for(:search, url: 'books/get_form_simple_form', remote: true) do |f| %>   
        <%= f.input_field :input, id:"input1", placeholder:""%>
         <!-- usage of .input_field to display aligned -->
        <%= f.button :submit, "Simple_form AJAX", class:"btn btn-primary"%>
      <% end %>
    </div>
    <div class="col">
      <p>Result: <span id="form-1"> </span></p>
      <br>
      <p>Result: <span id="form-2" > </span></p>
    </div>
  </div>

  <br>
  
  <div class="row">
    <div class="col">
      
    </div>
    <div class="col">
      
    </div>
  </div>
  We also used the Rails form helper <strong>Simple_Form</strong> so again it is CSRF protected.    
    <!-- Note: for a custom button, we do: -->
    <!--  <%#= f.button :submit, 'Search!' do %> -->
    <!--            my custom button text           -->
    <!--  <%# end %>                             -->
    <hr>
    <h5>Submitting data from clipboard. </h5>
    <p>Example <strong>copyClipboard.js</strong> by using the clipboard API or <strong>document.exeCommand</strong>
    if not suported by the browser.</p>
    <div class="row">
      <div class="col">
    <!-- do not use 'form'. Used the Javascript function 'copyClipboard.js' -->
        <input id="to-copy" type="text" style= "border: 1px solid grey"
          placeholder = "type n click to copy/paste">
        <button id="copy-btn" class="btn btn-primary">Copy to clipboard</button>
      </div>
      <div class="col">
        <p>Result is pasted here: <span id = 'clipboard'></span></p>
      </div>
      <br>
    </div>
    <div class="row">
      <p><a href="#start">Back to start</a></p> 
    </div>
</div>


<div class="container" id='books-all'>
  <hr>
  <div class="row">
  
    <h4>Rendering partial within a page with AJAX </h4>
    <p> The link <strong>'View all books with AJAX' <=> < '%=' link_to "View All books with AJAX", "books/books_ajax", remote: true '%'></strong>
    calls the method (controller#method) <strong>books#books_ajax</strong>. We specified <strong>remote: true</strong>,
    so that we will have an AJAX call, and we have to add in the controller's method the following lines:
    <ul>
      respond_to do |format| <br>format.js <br>end
    </ul>
    so that this method calls the corresponding Javascript file <strong>books_ajax.js.erb</strong> in which we can
    write  <strong>erb</strong>.</p>
    <p>The controller's method furnishes the data (here <strong>@books</strong> and pass them to the JS function which renders
    (within a partial at a designed location):
    <ul>
      const divBooks = document.getElementById('books-all-ajax'); <br>
      divBooks.innerHTML = ""; <br>
      divBooks.insertAdjacentHTML( <br>
        "beforeend", <br>
      "<'%'= j render "books/books_all", books: @books, cached: true %>") <br>
      }; 
    </ul> 
    When clicking 'View all books with AJAX', since the stars are build randomly within the partial, 
    they will change but there is no page reload.
    <ul>
      <'%' (0..5).to_a.sample.times do  %> <br>
      <'i class="far fa-star" '><'/i>' <br>
      <'%' end %>
    </ul>
    </p>

    <p> A toggle button display/hide is added and triggers a listening Javascript function <strong>toggleDiv.js</strong>. On clic, it sets  
    <strong>toggleAttribute('hidden')</strong> on the div container of the response (alternatively, we can add/remove
    <strong>classList.toggle('active')</strong> to this container div where 'active' is the CSS class <strong> {display: none;}</strong>.
    </p>
    <p>
      <%= link_to 'View all books with AJAX', "books/books_ajax", remote: true, class:'btn btn-primary' %>
      <button class="btn btn-primary" id="hideBtn"> Hide / Show results </button>
    </p>
    <!-- class .active defined in _alert.scss and class toggled by 'toggleDiv.js-->
    <div id="hideMe" > <!-- class="not-active" -->
      <div id = "books-all-ajax"></div>  
    </div>
    
  </div>
  <div class="row">
    <p><a href="#start">Back to start</a></p>
  </div>
</div>  

<div class="container" id="genre-fetch">
  <hr>
  <h4>AJAX and <strong>fetch()</strong>: create & delete 'genres'</h4>
  <p>We use a basic HTML form, without Rails helpers, so without <strong>remote: true</strong>.</p> 
  <p>The tags will then be created by Javascript. It's pur JS (not 'js.erb') so we can't use Rails helpers.</p> 
  <p>To create a new 'genre', we edit the input and then the action button event will trigger a Javascript function
  which calls <strong>fetch, method: 'POST'</strong> to the URL <strong>/APIcreate</strong>. This URL is served
  by the Rails method <strong>genres#APIcreate</strong> which creates an new instance in the database. 
  With the response of  <strong>fetch</strong>, the Javascript function parses the response and inserts
  a tag with the name, id and is responsive to focus with the <strong>tabindex</strong> attribute.</p>
  
  <p>We have 2 'delete' methods: the first one is via <strong>fetch: method: 'DELETE'</strong>, and
  another one via a direct <strong>link_to '/genres/:id </strong> with <strong>delete <=> genres#destroy</strong></p>
  <p> For the <strong>fetch</strong>, we select/clic on a tag and it's value will be copied in the input,
  and it's id will be copied in a hidden input. Then the button triggers a Javascript event which calls 
  a <strong>fetch method: 'DELETE'</strong> to the url '<strong>genres/:id</strong>. This URL is served by Rails's 
  method <strong>genres#APIdelete</strong>: it then deletes the id from the database. Finaly the Javacsript
  function removes the tag from the view. We defined a custom route with:
  <ul><strong>delete</strong> 'APIdestroy/:id', to: 'genres#APIdestroy',</ul>
  </p>
  
  <p>The second delete method 'genre' from the database as there is a 'delete' link on the tag
  who calls a Rails <strong>genre#destroy/:id</strong> method. We get the id of these tags (they are only
  p's) by using <strong>tabindex = <'% genre.id %> (>= 0)</strong> to get focus on a individual tag (a 'p' tag)
   and find it's id. Then the Rails method calls a Javascript function <strong>destroy.js.erb</strong>to remove 
   this 'genre' from the view.</p> 
  <div class="row">
    <div class="col">    
      
        <form id="formCreateGenre">
        <!-- No need for action or method attributes since JS function 'createGenre' triggers on submit -->
          <input type="text" id="inputGenre" class="border">
          <input type="submit" value="Fetch Create Genre" class="btn btn-primary">
        </form>
        <%# <%= form_with model: @genre, url: 'genres/createGenre' do |f|  %>
          <%#= f.text_field :name, input_html: { class: "ml-3 mt-2 p-2 input-author" } %>
          <%#= submit_tag "Create", class:"btn btn-success" %>
        <%# end %>
      
        <hr>
        <form id="formDeleteGenre">
          <input type="text" id="genre_to_delete" class="border">
          <input type="text" hidden id="hiddenId">
          <input type="submit" value='Fetch Delete Genre' class="btn btn-danger">
        </form>
    </div>
    <div class="col radio-choices border" id="display-genres">
    <!-- https://www.hellodeloo.com/comment-utiliser-attribut-tabindex/> -->
      <p>  </p>
      <% @genres.each do |genre| %>
      <!--  add 'tabindex= 12' to be able to get focus/click/... on this element via JS --> 
        <p class="radio-label pr-1 genre-tag" tabindex = <%=genre.id%> id = "genre_<%=genre.id%>" data-name="<%=genre.name%>"" contenteditable="true">
          <span class="pr-2"><%= genre.name %></span>
          <span><%= link_to genre_path(genre), method: :delete, remote: true, data:{confirm: "You can delete this tag only if not used"} do %>
          <i class= 'fa fa-times-circle'></i>
        <% end %>
        </span>
        </p>
      <% end %>
    </div>
  </div>
</div>




<div class="container"><hr>

  <div class="row">
    <p>Books and authors can get comments by users with a polymorphic association (type <=> Book or Author, and id).
    We also have a 'User has_many :books' and 'User has_many :authors' association as a user can put many reviews which is polymorphic.  </p>

    <h3>Uncommented books: using a scope and finding nil column on associated table</h3>
    <%= render 'books/reviewed_unreviewed', books: @unreviewed_books %>

  </div>
  <hr>
  <div class="row">

    <h3>Commented books: using a scope and simply joins</h3>
    <%= link_to 'Comment books', root_path %>
    <%#= render 'books/reviewed_unreviewed', books: @reviewed_books %>
    
  </div>
  <hr>
</div>



<%#= render 'books/catalog', authors: @authors %>

<!-- https://medium.com/le-wagon/build-a-simple-search-with-the-simple-form-gem-in-rails-5-b247168282d1> -->
<!-- standard method is POST so GET is specified here. -->
<!-- By using a symbol instead of an object, we can get a key in the params. Here  ':book_title' -->
<!-- so params[:search][:book_title] contains the title -->
<!-- If we had declared on object say @search, then it would have to be defined, not the case here -->

<!-- the url:'root_path', means the  result will render on the root page, so on the same page (SPA) -->
<!-- if url:'get...title_path' tells where to be displayed. It should render another page (related to the -->
<!-- view convention, but by defining the method as AJAX rendering, the Javascript will render the partial-->
<!-- where we want. This AJAX call is permitted simply by 'remote: true'  -->

<!-- 'input_field' gets rid of the div and displays the form-group elts inline. -->

<!-- we set collection here as we want the inputs to be controlled -->

<!-- with 'multiple: true', we have a drop-down selection form -->

<hr>
<div class='container' id='search'>
<h3>Multiple search forms AJAX rendered</h3>

<h5>Reviews on books (search by title)</h5>
  <div class="row">    
    <div class="col">
      <%= simple_form_for :search,
        url: 'books/reviews_by_title',
        remote: true,
        method: :get do |f| %>   
        <%= f.button :submit, "Search", class:"btn btn-primary"%>
        <%= f.input_field :input_title, collection: @titles, multiple: true %>   
      <% end %>
    </div>
    <div class="col">
      <div id="ajax_review_by_title"> <!-- JS injection here --> </div>
    </div>  
  </div>

  <hr>
  <h5>Books by author</h5>
  <div class="row">
    <div class="col">
      <%= simple_form_for :search,
        url: 'books/books_by_author',
        wrapper: :inline_form,
        remote: true,
        method: :get do |f| %>   
        <%= f.input_field :input_name, collection: @list_authors, multiple: true  %>
        <%= f.button :submit, "Search", class:"btn-primary" %>
      <% end %>
    </div>
    <div class="col">
      <div class='row' id="ajax_books_by_author"> </div>
    </div>
  </div>
  <hr>
  <h5>Comments from the users (usage of "reviewable")</h5>
  <div class="row">  
    <%= simple_form_for :search,
      url: 'books/reviews_by_user',
      remote: true,
      method: :get do |f| %>   
      <%= f.input_field :user_name, collection: @users_names, multiple: true %>
      <%= f.submit "Search", class:"btn btn-primary" %>
    <% end %>
  
  <hr>
    <div id="ajax_reviews_by_user">
      <% if false && @name == nil %>
        <h3>All comments by users: usage of "reviewable"</h3>
        <%= render 'books/users_reviews', users: @users %>
      <% end %>
    </div>
  </div>
  <a href="#start">Back to start</a>
</div>

<div class="container" id="API-JSON">
<hr>
  <div class="col">
      <p> The link below makes a HTTP request 'url= ../books_all' to display the file  '/views/books_all', which in served by the method 'books#books_all' for the data. </p>
      <p>% link_to 'View books in another page', books_all_path % </p>
      <p>This is a link to a new page. We pass directly the instance '@books' to the view which uses '@books'. This is different from partials, which use a local variable,
      'books: @books'.</p>
      <p> The same info is displayed, but through the copy of the partial without the _underscore, ie 'books/reviews_all.html.erb'. 
      This time, the data is furnished by the method books#reviews_all' which 'lazy' renders '../books/books_all.html' with Rails naming association convention. </p>

      <p><%= link_to "View books.json in another page", books_display_json_path, class:'btn btn-primary' %> </p>
      <p> "render json: @books"</p>
  </div>
  <a href="#start">Back to start</a>
</div>