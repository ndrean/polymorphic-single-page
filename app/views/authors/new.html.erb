<%= link_to 'Back', root_path %>

<ul>
    <li>The root view <strong>/view/books/index</strong> links to this view <strong>/views/authors/new</strong>.
    Thus the method <strong>author#new</strong> initializes the variables used is this form.
    </li>
    <li> This form uses 3 models, <strong>@author = Author.new</strong> and <strong>@book = @author.books.build</strong>,
    and <strong>@genre = Genre.new</strong>. 
    </li>
    
    <li>If we specify <strong>url: books_path <=> url: books/new</strong> in the form definition,
    then Rails will call the method <strong>books#create</strong> when saving, and use <strong>form action="/books" method="post"></strong> 
    ('POST' is the default method) 
            
    </li>
    <li>Since this view is located in <strong>/views/authors</strong>, then 
    Rails will use <strong>authors_path</strong> and use <strong>authors#create</strong> by default when saving,
    so will put <strong>form action="authors" method="post"</strong>.
    </li>
</ul>

<div class="container">
    <div class="row">
        <% if @author.errors.any? %>
            <h5 ><%= pluralize(@author.errors.count, "error") %> prohibited this post from being saved:</h5>
            <ul>
                <% @author.errors.full_messages.each do |message| %>
                    <li><%= message %></li>
                <% end %>
            </ul>
        <% end %>
    </div>

    <div class="row">
    
<!-- le 'submit' actionne authors#create <-> authors_path d'ou l'url-->
        <%= simple_form_for @author, url: authors_path do |f| %>
            <legend>Create an author</legend>
        <div class="row border d-flex flex-row justify-content-between align-items-center">         
            <%= f.error_notification %>
            <div class="col-sm-8 col-md-8">
    <!--  '.input_field' removes the div around -->
                <%= f.input_field :name, placeholder: "Author's name",
                    class: "input-author" %>
    <!-- !! with 'input_field', we must use 'class: ...' without 'thml_input-->
            </div>
            <div class="col-sm-4 col-md-4">
                <%= f.association :country, prompt: "Select a country", label: false, 
                    input_html: { class: "form-control" } %>
            </div>

        <%# # https://api.rubyonrails.org/v5.1/classes/ActionView/Helpers/FormTagHelper.html#method-i-hidden_field_tag %>
                <%= f.input :id, as: :hidden, value: @author.object_id  %>
        </div>
<!-- https://github.com/heartcombo/simple_form/wiki/Nested-Models> -->    
        <br>
        <legend>Create associated books</legend> 
        <div class="row border pl-2 pr-3" >
            <div class="row d-flex">
                 
                <%= f.simple_fields_for(:books, :genre)  do |b| %>   
                    <%#= binding.pry %>
                    <%= render 'authors/bookfields', f:b, genres: @genres %>
                <% end %>   

                <%= button_to_add_book 'Add a book', f, :books, @genres %>
            </div> 
            
        </div>
    
                
        <div class="row p-2">
            <%= f.submit "Create author & books", class:"btn btn-primary"%> 
        </div>
        
        <% end %>
    </div>
    
    <div class="row border p-2" id="new-genre" >
    <!-- !! with 'form.input', we must use 'input_html: {class:..}' -->
        <%= simple_form_for @genre, url: '/genres', remote: true,
                wrapper: :inline_form, html: { class: "form-inline" } do |b| %>
        <legend>Create a new genre</legend>
            <%= b.input :name, placeholder: "Enter a new genre?",
                input_html: { class: "ml-3 mt-2 p-2 input-author", id: "newgenre" } %>

            <%= b.submit "Create", class:"btn-success ml-4 pl-3 pr-3 mt-2 input-author"  %>
        
        <% end %>
    </div>
</div>